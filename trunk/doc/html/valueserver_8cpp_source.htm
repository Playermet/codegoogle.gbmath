<!-- This comment will put IE 6, 7 and 8 in quirks mode -->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>gbmath: valueserver.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javaScript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body onload='searchBox.OnSelectItem(0);'>
<!-- Generated by Doxygen 1.6.3 -->
<script type="text/javascript"><!--
var searchBox = new SearchBox("searchBox", "search",false,'Search');
--></script>
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.htm"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <img id="MSearchSelect" src="search/search.png"
             onmouseover="return searchBox.OnSearchSelectShow()"
             onmouseout="return searchBox.OnSearchSelectHide()"
             alt=""/>
        <input type="text" id="MSearchField" value="Search" accesskey="S"
             onfocus="searchBox.OnSearchFieldFocus(true)" 
             onblur="searchBox.OnSearchFieldFocus(false)" 
             onkeyup="searchBox.OnSearchFieldChange(event)"/>
        <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
        </div>
      </li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
    </ul>
  </div>
<h1>valueserver.cpp</h1><a href="valueserver_8cpp.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 ï»¿#pragma once
<a name="l00002"></a>00002 
<a name="l00003"></a>00003 <span class="preprocessor">#include &quot;<a class="code" href="__gbmath_8h.htm" title="MAIN INCLUDE HEADER.">_gbmath.h</a>&quot;</span>
<a name="l00004"></a>00004 
<a name="l00005"></a>00005 
<a name="l00006"></a>00006 <span class="preprocessor">#pragma warning(push)</span>
<a name="l00007"></a>00007 <span class="preprocessor"></span><span class="preprocessor">#pragma warning(disable : 4290)</span>
<a name="l00008"></a>00008 <span class="preprocessor"></span><span class="preprocessor">#pragma warning(disable : 4996)</span>
<a name="l00009"></a>00009 <span class="preprocessor"></span>
<a name="l00010"></a>00010  
<a name="l00011"></a>00011 <span class="keyword">namespace </span>gbmath
<a name="l00012"></a>00012 {
<a name="l00013"></a>00013 
<a name="l00014"></a><a class="code" href="namespacegbmath_1_1detail.htm">00014</a>  <span class="keyword">namespace </span>detail
<a name="l00015"></a>00015  {
<a name="l00016"></a>00016 
<a name="l00017"></a>00017          <span class="keywordtype">bool</span> <a class="code" href="namespacegbmath_1_1detail.htm#a78f939946b371b349698f1ae504563bf">check_str_maybe_name</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* str)
<a name="l00018"></a>00018          {
<a name="l00019"></a>00019                  <span class="keywordflow">if</span>(!str) <span class="keywordflow">return</span>  <span class="keyword">false</span>;
<a name="l00020"></a>00020                  
<a name="l00021"></a>00021                  <span class="keyword">const</span> <span class="keywordtype">size_t</span> LEN =  strlen(str);
<a name="l00022"></a>00022                  <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> c=0; c&lt;LEN; c++)
<a name="l00023"></a>00023                  {
<a name="l00024"></a>00024                          <span class="keywordflow">if</span>( c == 0 )
<a name="l00025"></a>00025                          {
<a name="l00026"></a>00026                                  <span class="comment">// first iter</span>
<a name="l00027"></a>00027                                 <span class="keywordflow">if</span>( (str[c] &gt;= <span class="charliteral">&#39;A&#39;</span>) &amp;&amp; (str[c] &lt;= <span class="charliteral">&#39;Z&#39;</span>)  ) <span class="keywordflow">continue</span>;
<a name="l00028"></a>00028                                 <span class="keywordflow">if</span>( (str[c] &gt;= <span class="charliteral">&#39;a&#39;</span>) &amp;&amp; (str[c] &lt;= <span class="charliteral">&#39;z&#39;</span>)  ) <span class="keywordflow">continue</span>;
<a name="l00029"></a>00029                          
<a name="l00030"></a>00030                                 <span class="keywordflow">continue</span>;
<a name="l00031"></a>00031                          }
<a name="l00032"></a>00032                          <span class="keywordflow">else</span>
<a name="l00033"></a>00033                          {
<a name="l00034"></a>00034                                 <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00035"></a>00035                          }
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 
<a name="l00038"></a>00038                          <span class="keywordflow">if</span>( (str[c] &gt;= <span class="charliteral">&#39;A&#39;</span>) &amp;&amp; (str[c] &lt;= <span class="charliteral">&#39;Z&#39;</span>)  )
<a name="l00039"></a>00039                                  <span class="keywordflow">continue</span>;
<a name="l00040"></a>00040 
<a name="l00041"></a>00041                          <span class="keywordflow">if</span>( (str[c] &gt;= <span class="charliteral">&#39;a&#39;</span>) &amp;&amp; (str[c] &lt;= <span class="charliteral">&#39;z&#39;</span>)  )
<a name="l00042"></a>00042                                  <span class="keywordflow">continue</span>;
<a name="l00043"></a>00043 
<a name="l00044"></a>00044                          <span class="keywordflow">if</span>( (str[c] &gt;= <span class="charliteral">&#39;0&#39;</span>) &amp;&amp; (str[c] &lt;= <span class="charliteral">&#39;9&#39;</span>)  )
<a name="l00045"></a>00045                                  <span class="keywordflow">continue</span>;
<a name="l00046"></a>00046 
<a name="l00047"></a>00047                          <span class="keywordflow">if</span>( (str[c]==<span class="charliteral">&#39;-&#39;</span>) || (str[c]==<span class="charliteral">&#39;_&#39;</span>)  )
<a name="l00048"></a>00048                                  <span class="keywordflow">continue</span>;
<a name="l00049"></a>00049 
<a name="l00050"></a>00050 
<a name="l00051"></a>00051                          <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00052"></a>00052 
<a name="l00053"></a>00053                  }
<a name="l00054"></a>00054 
<a name="l00055"></a>00055                  <span class="keywordflow">return</span>  <span class="keyword">true</span>;
<a name="l00056"></a>00056          }
<a name="l00057"></a>00057 
<a name="l00058"></a>00058 
<a name="l00059"></a>00059 
<a name="l00060"></a>00060         <span class="comment">//===================================================================</span>
<a name="l00061"></a><a class="code" href="classgbmath_1_1detail_1_1value__name.htm#ada54d84788b20674bb2c5732a0e026fe">00061</a>          <a class="code" href="classgbmath_1_1detail_1_1value__name.htm#a6028dd73d88fdf16f2a275791525bca6">value_name::value_name</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* name) <span class="keywordflow">throw</span> (std::runtime_error)
<a name="l00062"></a>00062          {
<a name="l00063"></a>00063                  m_name[0] = <span class="charliteral">&#39;\0&#39;</span>;
<a name="l00064"></a>00064 
<a name="l00065"></a>00065                 *<span class="keyword">this</span> = name;
<a name="l00066"></a>00066 
<a name="l00067"></a>00067          }
<a name="l00068"></a>00068 
<a name="l00069"></a><a class="code" href="classgbmath_1_1detail_1_1value__name.htm#ad5f334a166ad33059f0ee39b822f14fd">00069</a>          <span class="keywordtype">bool</span> <a class="code" href="classgbmath_1_1detail_1_1value__name.htm#ad4bb51a14a971c24588498c551d5ddac">value_name::operator == </a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* a) <span class="keyword">const</span> <span class="keywordflow">throw</span> (std::runtime_error)
<a name="l00070"></a>00070          {
<a name="l00071"></a>00071                  assert(<span class="keyword">false</span> &amp;&amp; <span class="stringliteral">&quot;need debug step&quot;</span>);
<a name="l00072"></a>00072 
<a name="l00073"></a>00073                  <span class="keywordflow">if</span> (a==NULL)
<a name="l00074"></a>00074                  {
<a name="l00075"></a>00075                          <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;NULL&quot;</span>);
<a name="l00076"></a>00076                  }
<a name="l00077"></a>00077 
<a name="l00078"></a>00078                  <span class="keywordflow">if</span>(a[0] == <span class="charliteral">&#39;\0&#39;</span>)
<a name="l00079"></a>00079                  {
<a name="l00080"></a>00080                          <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;empty name&quot;</span>);
<a name="l00081"></a>00081                  }
<a name="l00082"></a>00082 
<a name="l00083"></a>00083                  <span class="keywordflow">if</span>( !<a class="code" href="namespacegbmath_1_1detail.htm#a78f939946b371b349698f1ae504563bf">check_str_maybe_name</a>(a))
<a name="l00084"></a>00084                  {
<a name="l00085"></a>00085                          <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;bad argument string&quot;</span>);
<a name="l00086"></a>00086                  }
<a name="l00087"></a>00087 
<a name="l00088"></a>00088                  <span class="keyword">const</span> <span class="keywordtype">size_t</span> srclen = strlen(a);
<a name="l00089"></a>00089 
<a name="l00090"></a>00090                  <span class="keywordtype">int</span> c=0;
<a name="l00091"></a>00091                  <span class="keywordflow">while</span>(<span class="keyword">true</span>)
<a name="l00092"></a>00092                  {
<a name="l00093"></a>00093 
<a name="l00094"></a>00094                          <span class="keywordflow">if</span>( (m_name[c] == <span class="charliteral">&#39;\0&#39;</span>) || (a[c] == <span class="charliteral">&#39;\0&#39;</span>) )
<a name="l00095"></a>00095                          {
<a name="l00096"></a>00096                                  <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00097"></a>00097                          }
<a name="l00098"></a>00098 
<a name="l00099"></a>00099                          <span class="keywordflow">if</span>( tolower(m_name[c]) != tolower(a[c]) )
<a name="l00100"></a>00100                          {
<a name="l00101"></a>00101                                  <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00102"></a>00102                          }
<a name="l00103"></a>00103 
<a name="l00104"></a>00104 
<a name="l00105"></a>00105                          c++;
<a name="l00106"></a>00106                  }
<a name="l00107"></a>00107 
<a name="l00108"></a>00108                  <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00109"></a>00109          }
<a name="l00110"></a>00110 
<a name="l00111"></a><a class="code" href="classgbmath_1_1detail_1_1value__name.htm#a2e0507def85a1c9b5ba2624995f0088d">00111</a>          <span class="keywordtype">void</span> <a class="code" href="classgbmath_1_1detail_1_1value__name.htm#a2e0507def85a1c9b5ba2624995f0088d">value_name::operator = </a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* a) <span class="keywordflow">throw</span> (std::runtime_error)
<a name="l00112"></a>00112          {
<a name="l00113"></a>00113                  assert(<span class="keyword">false</span> &amp;&amp; <span class="stringliteral">&quot;need debug step&quot;</span>);
<a name="l00114"></a>00114 
<a name="l00115"></a>00115                  <span class="keywordflow">if</span> (a==NULL)
<a name="l00116"></a>00116                  {
<a name="l00117"></a>00117                          <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;name string is NULL&quot;</span>);
<a name="l00118"></a>00118                  }
<a name="l00119"></a>00119 
<a name="l00120"></a>00120                  <span class="keywordflow">if</span>(a[0] == <span class="charliteral">&#39;\0&#39;</span>)
<a name="l00121"></a>00121                  {
<a name="l00122"></a>00122                          <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;empty name&quot;</span>);
<a name="l00123"></a>00123                  }
<a name="l00124"></a>00124 
<a name="l00125"></a>00125                  <span class="keyword">const</span> <span class="keywordtype">size_t</span> LEN = strlen(a);
<a name="l00126"></a>00126                  <span class="keywordflow">if</span>(LEN &gt; 31)
<a name="l00127"></a>00127                  {
<a name="l00128"></a>00128                          <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;big name&quot;</span>);
<a name="l00129"></a>00129                  }
<a name="l00130"></a>00130 
<a name="l00131"></a>00131                  <span class="keywordflow">if</span>( !<a class="code" href="namespacegbmath_1_1detail.htm#a78f939946b371b349698f1ae504563bf">check_str_maybe_name</a>(a) ) 
<a name="l00132"></a>00132                  {
<a name="l00133"></a>00133                          <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;bad string name&quot;</span>);
<a name="l00134"></a>00134                  }
<a name="l00135"></a>00135 
<a name="l00136"></a>00136 
<a name="l00137"></a>00137                  strncpy(m_name, a, 31);
<a name="l00138"></a>00138          }
<a name="l00139"></a>00139 
<a name="l00140"></a>00140 
<a name="l00141"></a>00141  }
<a name="l00142"></a>00142 
<a name="l00143"></a>00143 
<a name="l00144"></a>00144 
<a name="l00145"></a>00145 
<a name="l00146"></a>00146  <span class="comment">//=============================================</span>
<a name="l00147"></a>00147 
<a name="l00148"></a>00148 
<a name="l00149"></a><a class="code" href="classgbmath_1_1value_server.htm#af4eb49ac8a2d1fa64f3aae07346c6395">00149</a>         <span class="keywordtype">bool</span> <a class="code" href="classgbmath_1_1value_server.htm#af4eb49ac8a2d1fa64f3aae07346c6395">valueServer::isFloatValueExists</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* val_name)<span class="keyword"> const</span>
<a name="l00150"></a>00150 <span class="keyword">        </span>{
<a name="l00151"></a>00151                 <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> c=0; c&lt;<a class="code" href="classgbmath_1_1value_server.htm#aae5faff7d8ea442df3253ff7b16cebe2">m_FloatValues</a>.size(); c++)
<a name="l00152"></a>00152                 {
<a name="l00153"></a>00153                         <span class="keywordflow">if</span>( <a class="code" href="classgbmath_1_1value_server.htm#aae5faff7d8ea442df3253ff7b16cebe2">m_FloatValues</a>[c].name == val_name )   <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00154"></a>00154                 }
<a name="l00155"></a>00155 
<a name="l00156"></a>00156                 <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00157"></a>00157         }
<a name="l00158"></a>00158 
<a name="l00159"></a><a class="code" href="classgbmath_1_1value_server.htm#a9816aca5e40b22794b48eded82813725">00159</a>         <span class="keywordtype">bool</span> <a class="code" href="classgbmath_1_1value_server.htm#a9816aca5e40b22794b48eded82813725">valueServer::isVector2ValueExists</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* val_name)<span class="keyword"> const</span>
<a name="l00160"></a>00160 <span class="keyword">        </span>{
<a name="l00161"></a>00161                 <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> c=0; c&lt;<a class="code" href="classgbmath_1_1value_server.htm#a5dde6fbd1233b90bb2a00555f8aab228">m_Vector2Values</a>.size(); c++)
<a name="l00162"></a>00162                 {
<a name="l00163"></a>00163                         <span class="keywordflow">if</span>( <a class="code" href="classgbmath_1_1value_server.htm#a5dde6fbd1233b90bb2a00555f8aab228">m_Vector2Values</a>[c].name == val_name )   <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00164"></a>00164                 }
<a name="l00165"></a>00165 
<a name="l00166"></a>00166                 <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00167"></a>00167         }
<a name="l00168"></a>00168 
<a name="l00169"></a><a class="code" href="classgbmath_1_1value_server.htm#a9c823c29e20fbff795129e29ee8f2b92">00169</a>         <span class="keywordtype">bool</span> <a class="code" href="classgbmath_1_1value_server.htm#a9c823c29e20fbff795129e29ee8f2b92">valueServer::isVector3ValueExists</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* val_name)<span class="keyword"> const</span>
<a name="l00170"></a>00170 <span class="keyword">        </span>{
<a name="l00171"></a>00171                 <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> c=0; c&lt;<a class="code" href="classgbmath_1_1value_server.htm#ae0c1121e85acda1074a801797f2c59e9">m_Vector3Values</a>.size(); c++)
<a name="l00172"></a>00172                 {
<a name="l00173"></a>00173                         <span class="keywordflow">if</span>( <a class="code" href="classgbmath_1_1value_server.htm#ae0c1121e85acda1074a801797f2c59e9">m_Vector3Values</a>[c].name == val_name )   <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00174"></a>00174                 }
<a name="l00175"></a>00175 
<a name="l00176"></a>00176                 <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00177"></a>00177         }
<a name="l00178"></a>00178  
<a name="l00179"></a><a class="code" href="classgbmath_1_1value_server.htm#a3e251419d4cde28011419818114a1f0f">00179</a>         <span class="keywordtype">bool</span> <a class="code" href="classgbmath_1_1value_server.htm#a3e251419d4cde28011419818114a1f0f">valueServer::isVector4ValueExists</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* val_name)<span class="keyword"> const</span>
<a name="l00180"></a>00180 <span class="keyword">        </span>{
<a name="l00181"></a>00181                 <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> c=0; c&lt;<a class="code" href="classgbmath_1_1value_server.htm#a1b38b461f0d0f465f0a858dbc556176f">m_Vector4Values</a>.size(); c++)
<a name="l00182"></a>00182                 {
<a name="l00183"></a>00183                         <span class="keywordflow">if</span>( <a class="code" href="classgbmath_1_1value_server.htm#a1b38b461f0d0f465f0a858dbc556176f">m_Vector4Values</a>[c].name == val_name )   <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00184"></a>00184                 }
<a name="l00185"></a>00185 
<a name="l00186"></a>00186                 <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00187"></a>00187         }
<a name="l00188"></a>00188 
<a name="l00189"></a><a class="code" href="classgbmath_1_1value_server.htm#ab8883269f1e346c02ba9b73ae37715ca">00189</a>         <span class="keywordtype">bool</span> <a class="code" href="classgbmath_1_1value_server.htm#ab8883269f1e346c02ba9b73ae37715ca">valueServer::isMatrix33ValueExists</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* val_name)<span class="keyword"> const</span>
<a name="l00190"></a>00190 <span class="keyword">        </span>{
<a name="l00191"></a>00191                 <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> c=0; c&lt;<a class="code" href="classgbmath_1_1value_server.htm#a5f072c54c623401d2a7077e08e9ba9a5">m_Matrix33Values</a>.size(); c++)
<a name="l00192"></a>00192                 {
<a name="l00193"></a>00193                         <span class="keywordflow">if</span>( <a class="code" href="classgbmath_1_1value_server.htm#a5f072c54c623401d2a7077e08e9ba9a5">m_Matrix33Values</a>[c].name == val_name )   <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00194"></a>00194                 }
<a name="l00195"></a>00195 
<a name="l00196"></a>00196                 <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00197"></a>00197         }
<a name="l00198"></a>00198 
<a name="l00199"></a><a class="code" href="classgbmath_1_1value_server.htm#a2518cbff2f1271d09005992407287bdd">00199</a>         <span class="keywordtype">bool</span> <a class="code" href="classgbmath_1_1value_server.htm#a2518cbff2f1271d09005992407287bdd">valueServer::isMatrix44ValueExists</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* val_name)<span class="keyword"> const</span>
<a name="l00200"></a>00200 <span class="keyword">        </span>{
<a name="l00201"></a>00201                 <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> c=0; c&lt;<a class="code" href="classgbmath_1_1value_server.htm#ab76581200d6ce913f8653153a65bf62f">m_Matrix44Values</a>.size(); c++)
<a name="l00202"></a>00202                 {
<a name="l00203"></a>00203                         <span class="keywordflow">if</span>( <a class="code" href="classgbmath_1_1value_server.htm#ab76581200d6ce913f8653153a65bf62f">m_Matrix44Values</a>[c].name == val_name )   <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00204"></a>00204                 }
<a name="l00205"></a>00205 
<a name="l00206"></a>00206                 <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00207"></a>00207         }
<a name="l00208"></a>00208 
<a name="l00209"></a>00209 
<a name="l00210"></a><a class="code" href="classgbmath_1_1value_server.htm#ae1af6c6d2a79225667893898de739e37">00210</a>  <span class="keywordtype">int</span> <a class="code" href="classgbmath_1_1value_server.htm#ae1af6c6d2a79225667893898de739e37">valueServer::registerFloatValue</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* val_name, <a class="code" href="namespacegbmath_1_1detail.htm#a1fec8938a8e6202082910bf58cffa6d6">detail::FuncGetFloatValue</a> _func, <span class="keywordtype">void</span>* _user_ptr) <span class="keywordflow">throw</span>(std::runtime_error)
<a name="l00211"></a>00211  {
<a name="l00212"></a>00212           <span class="keywordflow">if</span>( isFloatValueExists(val_name) )
<a name="l00213"></a>00213           {
<a name="l00214"></a>00214                   std::string temp;
<a name="l00215"></a>00215                   temp = <span class="stringliteral">&quot;value &quot;</span>;
<a name="l00216"></a>00216                   temp += val_name;
<a name="l00217"></a>00217                   temp += <span class="stringliteral">&quot; exists&quot;</span>;
<a name="l00218"></a>00218                   <span class="keywordflow">throw</span> std::runtime_error(temp);
<a name="l00219"></a>00219           }
<a name="l00220"></a>00220 
<a name="l00221"></a>00221           <a class="code" href="structgbmath_1_1detail_1_1item_float_value.htm">detail::itemFloatValue</a> itm;
<a name="l00222"></a>00222 
<a name="l00223"></a>00223           itm.<a class="code" href="structgbmath_1_1detail_1_1item_float_value.htm#a367854dc3c08772f7e601e573ba8309e">name</a> = val_name;
<a name="l00224"></a>00224           itm.<a class="code" href="structgbmath_1_1detail_1_1item_float_value.htm#a3a9bf20f6f1b7b9183399e20cee8af5b">func</a> = _func;
<a name="l00225"></a>00225           itm.<a class="code" href="structgbmath_1_1detail_1_1item_float_value.htm#a60b2590ab99b62b19a3fa3888a2552e5">user_ptr</a> = _user_ptr;
<a name="l00226"></a>00226           m_FloatValues.push_back(itm);
<a name="l00227"></a>00227 
<a name="l00228"></a>00228 
<a name="l00229"></a>00229           <span class="keywordflow">return</span> (<span class="keywordtype">int</span>)(m_FloatValues.size()-1);
<a name="l00230"></a>00230  }
<a name="l00231"></a>00231 
<a name="l00232"></a><a class="code" href="classgbmath_1_1value_server.htm#adb23b9fdf3915000c53bdd9bf2b8f084">00232</a>  <span class="keywordtype">int</span> <a class="code" href="classgbmath_1_1value_server.htm#adb23b9fdf3915000c53bdd9bf2b8f084">valueServer::registerVector2Value</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* val_name, <a class="code" href="namespacegbmath_1_1detail.htm#a89b402a7916081f37d106a23af358759">detail::FuncGetVector2Value</a> _func, <span class="keywordtype">void</span>* _user_ptr) <span class="keywordflow">throw</span>(std::runtime_error)
<a name="l00233"></a>00233  {
<a name="l00234"></a>00234          <span class="keywordflow">if</span>( isVector2ValueExists(val_name) )
<a name="l00235"></a>00235          {
<a name="l00236"></a>00236                  std::string temp;
<a name="l00237"></a>00237                  temp = <span class="stringliteral">&quot;value &quot;</span>;
<a name="l00238"></a>00238                  temp += val_name;
<a name="l00239"></a>00239                  temp += <span class="stringliteral">&quot; exists&quot;</span>;
<a name="l00240"></a>00240                  <span class="keywordflow">throw</span> std::runtime_error(temp);
<a name="l00241"></a>00241          }
<a name="l00242"></a>00242 
<a name="l00243"></a>00243          <a class="code" href="structgbmath_1_1detail_1_1item_vector2_value.htm">detail::itemVector2Value</a> itm;
<a name="l00244"></a>00244 
<a name="l00245"></a>00245          itm.<a class="code" href="structgbmath_1_1detail_1_1item_vector2_value.htm#a65d0a0097ca82e822e13d551e80ae227">name</a> = val_name;
<a name="l00246"></a>00246          itm.<a class="code" href="structgbmath_1_1detail_1_1item_vector2_value.htm#ac58760499bcaec3bb573ddb83c2b8fb4">func</a> = _func;
<a name="l00247"></a>00247          itm.<a class="code" href="structgbmath_1_1detail_1_1item_vector2_value.htm#a5d5a7ef99380f668444bf8518f73d9a2">user_ptr</a> = _user_ptr;
<a name="l00248"></a>00248          m_Vector2Values.push_back(itm);
<a name="l00249"></a>00249 
<a name="l00250"></a>00250 
<a name="l00251"></a>00251          <span class="keywordflow">return</span> (<span class="keywordtype">int</span>)(m_Vector2Values.size()-1);
<a name="l00252"></a>00252  }
<a name="l00253"></a>00253 
<a name="l00254"></a><a class="code" href="classgbmath_1_1value_server.htm#ac7d014683bc0777b51fbba98bd96580a">00254</a>  <span class="keywordtype">int</span> <a class="code" href="classgbmath_1_1value_server.htm#ac7d014683bc0777b51fbba98bd96580a">valueServer::registerVector3Value</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* val_name, <a class="code" href="namespacegbmath_1_1detail.htm#a2c2ab89f9336c0090111098c2e772ab4">detail::FuncGetVector3Value</a> _func, <span class="keywordtype">void</span>* _user_ptr) <span class="keywordflow">throw</span>(std::runtime_error)
<a name="l00255"></a>00255  {
<a name="l00256"></a>00256           
<a name="l00257"></a>00257          <span class="keywordflow">if</span>( isVector3ValueExists(val_name) )
<a name="l00258"></a>00258          {
<a name="l00259"></a>00259                  std::string temp;
<a name="l00260"></a>00260                  temp = <span class="stringliteral">&quot;value &quot;</span>;
<a name="l00261"></a>00261                  temp += val_name;
<a name="l00262"></a>00262                  temp += <span class="stringliteral">&quot; exists&quot;</span>;
<a name="l00263"></a>00263                  <span class="keywordflow">throw</span> std::runtime_error(temp);
<a name="l00264"></a>00264          }
<a name="l00265"></a>00265 
<a name="l00266"></a>00266          <a class="code" href="structgbmath_1_1detail_1_1item_vector3_value.htm">detail::itemVector3Value</a> itm;
<a name="l00267"></a>00267 
<a name="l00268"></a>00268          itm.<a class="code" href="structgbmath_1_1detail_1_1item_vector3_value.htm#ae802b7ea54bdf59a14edb48d538dafdc">name</a> = val_name;
<a name="l00269"></a>00269          itm.<a class="code" href="structgbmath_1_1detail_1_1item_vector3_value.htm#ac27e7563a4278739b7270362b3a054b5">func</a> = _func;
<a name="l00270"></a>00270          itm.<a class="code" href="structgbmath_1_1detail_1_1item_vector3_value.htm#a0d4cf6daefd5fbf0faad58fbba13e3c6">user_ptr</a> = _user_ptr;
<a name="l00271"></a>00271          m_Vector3Values.push_back(itm);
<a name="l00272"></a>00272 
<a name="l00273"></a>00273 
<a name="l00274"></a>00274          <span class="keywordflow">return</span> (<span class="keywordtype">int</span>)(m_Vector3Values.size()-1);
<a name="l00275"></a>00275  }
<a name="l00276"></a>00276 
<a name="l00277"></a><a class="code" href="classgbmath_1_1value_server.htm#aa00da946b93074a9f630c9c84c900fba">00277</a>  <span class="keywordtype">int</span> <a class="code" href="classgbmath_1_1value_server.htm#aa00da946b93074a9f630c9c84c900fba">valueServer::registerVector4Value</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* val_name, <a class="code" href="namespacegbmath_1_1detail.htm#a54a13d13a587ba1362f68433019a4f24">detail::FuncGetVector4Value</a> _func, <span class="keywordtype">void</span>* _user_ptr)  <span class="keywordflow">throw</span>(std::runtime_error)
<a name="l00278"></a>00278  {
<a name="l00279"></a>00279           
<a name="l00280"></a>00280          <span class="keywordflow">if</span>( isVector4ValueExists(val_name) )
<a name="l00281"></a>00281          {
<a name="l00282"></a>00282                  std::string temp;
<a name="l00283"></a>00283                  temp = <span class="stringliteral">&quot;value &quot;</span>;
<a name="l00284"></a>00284                  temp += val_name;
<a name="l00285"></a>00285                  temp += <span class="stringliteral">&quot; exists&quot;</span>;
<a name="l00286"></a>00286                  <span class="keywordflow">throw</span> std::runtime_error(temp);
<a name="l00287"></a>00287          }
<a name="l00288"></a>00288 
<a name="l00289"></a>00289          <a class="code" href="structgbmath_1_1detail_1_1item_vector4_value.htm">detail::itemVector4Value</a> itm;
<a name="l00290"></a>00290 
<a name="l00291"></a>00291          itm.<a class="code" href="structgbmath_1_1detail_1_1item_vector4_value.htm#a4bb7d679174948657ae131ef94307cea">name</a> = val_name;
<a name="l00292"></a>00292          itm.<a class="code" href="structgbmath_1_1detail_1_1item_vector4_value.htm#a39b2fa43211b505e3c7f765f4cced430">func</a> = _func;
<a name="l00293"></a>00293          itm.<a class="code" href="structgbmath_1_1detail_1_1item_vector4_value.htm#a67ffd9cc77cc28d168102f694ecb23ba">user_ptr</a> = _user_ptr;
<a name="l00294"></a>00294          m_Vector4Values.push_back(itm);
<a name="l00295"></a>00295 
<a name="l00296"></a>00296 
<a name="l00297"></a>00297          <span class="keywordflow">return</span> (<span class="keywordtype">int</span>)(m_Vector4Values.size()-1);
<a name="l00298"></a>00298  }
<a name="l00299"></a>00299 
<a name="l00300"></a><a class="code" href="classgbmath_1_1value_server.htm#a621aae55e31d9da711f279da22a3df6e">00300</a>  <span class="keywordtype">int</span> <a class="code" href="classgbmath_1_1value_server.htm#a621aae55e31d9da711f279da22a3df6e">valueServer::registerMatrix33Value</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* val_name, <a class="code" href="namespacegbmath_1_1detail.htm#a62824f9539b2243250b8d2f588931da1">detail::FuncGetMatrix33Value</a> _func, <span class="keywordtype">void</span>* _user_ptr) <span class="keywordflow">throw</span>(std::runtime_error)
<a name="l00301"></a>00301  {
<a name="l00302"></a>00302           
<a name="l00303"></a>00303          <span class="keywordflow">if</span>( isMatrix33ValueExists(val_name) )
<a name="l00304"></a>00304          {
<a name="l00305"></a>00305                  std::string temp;
<a name="l00306"></a>00306                  temp = <span class="stringliteral">&quot;value &quot;</span>;
<a name="l00307"></a>00307                  temp += val_name;
<a name="l00308"></a>00308                  temp += <span class="stringliteral">&quot; exists&quot;</span>;
<a name="l00309"></a>00309                  <span class="keywordflow">throw</span> std::runtime_error(temp);
<a name="l00310"></a>00310          }
<a name="l00311"></a>00311 
<a name="l00312"></a>00312          <a class="code" href="structgbmath_1_1detail_1_1item_matrix33_value.htm">detail::itemMatrix33Value</a> itm;
<a name="l00313"></a>00313 
<a name="l00314"></a>00314          itm.<a class="code" href="structgbmath_1_1detail_1_1item_matrix33_value.htm#aff4552edf6b40e436dd6953b02487df5">name</a> = val_name;
<a name="l00315"></a>00315          itm.<a class="code" href="structgbmath_1_1detail_1_1item_matrix33_value.htm#a40cca1e387e4057ce993baff99dcbbf5">func</a> = _func;
<a name="l00316"></a>00316          itm.<a class="code" href="structgbmath_1_1detail_1_1item_matrix33_value.htm#a611ce861989593c22971216f06e3615a">user_ptr</a> = _user_ptr;
<a name="l00317"></a>00317          m_Matrix33Values.push_back(itm);
<a name="l00318"></a>00318 
<a name="l00319"></a>00319 
<a name="l00320"></a>00320          <span class="keywordflow">return</span> (<span class="keywordtype">int</span>)(m_Matrix33Values.size()-1);
<a name="l00321"></a>00321 
<a name="l00322"></a>00322  }
<a name="l00323"></a>00323 
<a name="l00324"></a><a class="code" href="classgbmath_1_1value_server.htm#a83584951ff23d222edc468ed1389c48f">00324</a>  <span class="keywordtype">int</span> <a class="code" href="classgbmath_1_1value_server.htm#a83584951ff23d222edc468ed1389c48f">valueServer::registerMatrix44Value</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* val_name, <a class="code" href="namespacegbmath_1_1detail.htm#a4694006f69060322577f97bcd4050ddf">detail::FuncGetMatrix44Value</a> _func, <span class="keywordtype">void</span>* _user_ptr) <span class="keywordflow">throw</span>(std::runtime_error)
<a name="l00325"></a>00325  {
<a name="l00326"></a>00326           
<a name="l00327"></a>00327          <span class="keywordflow">if</span>( isMatrix44ValueExists(val_name) )
<a name="l00328"></a>00328          {
<a name="l00329"></a>00329                  std::string temp;
<a name="l00330"></a>00330                  temp = <span class="stringliteral">&quot;value &quot;</span>;
<a name="l00331"></a>00331                  temp += val_name;
<a name="l00332"></a>00332                  temp += <span class="stringliteral">&quot; exists&quot;</span>;
<a name="l00333"></a>00333                  <span class="keywordflow">throw</span> std::runtime_error(temp);
<a name="l00334"></a>00334          }
<a name="l00335"></a>00335 
<a name="l00336"></a>00336          <a class="code" href="structgbmath_1_1detail_1_1item_matrix44_value.htm">detail::itemMatrix44Value</a> itm;
<a name="l00337"></a>00337 
<a name="l00338"></a>00338          itm.<a class="code" href="structgbmath_1_1detail_1_1item_matrix44_value.htm#ab066551b2d8462f0c95890ac3a64d91c">name</a> = val_name;
<a name="l00339"></a>00339          itm.<a class="code" href="structgbmath_1_1detail_1_1item_matrix44_value.htm#adbf37832e2e7fc5fc08713315e795598">func</a> = _func;
<a name="l00340"></a>00340          itm.<a class="code" href="structgbmath_1_1detail_1_1item_matrix44_value.htm#afc262741c7913db0c75a8045649e69a9">user_ptr</a> = _user_ptr;
<a name="l00341"></a>00341          m_Matrix44Values.push_back(itm);
<a name="l00342"></a>00342 
<a name="l00343"></a>00343 
<a name="l00344"></a>00344          <span class="keywordflow">return</span> (<span class="keywordtype">int</span>)(m_Matrix44Values.size()-1);
<a name="l00345"></a>00345  }
<a name="l00346"></a>00346 
<a name="l00347"></a>00347  <span class="comment">//===========================================</span>
<a name="l00348"></a>00348 
<a name="l00349"></a><a class="code" href="classgbmath_1_1value_server.htm#a3d2c2deff896cd4017fdfa7ce7dfd224">00349</a>  <span class="keywordtype">float</span> <a class="code" href="classgbmath_1_1value_server.htm#a3d2c2deff896cd4017fdfa7ce7dfd224">valueServer::getFloatValue</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> index) <span class="keyword">const</span> <span class="keywordflow">throw</span>(<span class="keywordtype">int</span>)
<a name="l00350"></a>00350  {
<a name="l00351"></a>00351          <span class="keywordflow">if</span>( index &gt; (<span class="keywordtype">int</span>)m_FloatValues.size()-1 )
<a name="l00352"></a>00352          {
<a name="l00353"></a>00353                  <span class="keywordflow">throw</span> (index);
<a name="l00354"></a>00354          }
<a name="l00355"></a>00355 
<a name="l00356"></a>00356          <span class="keyword">const</span> <a class="code" href="structgbmath_1_1detail_1_1item_float_value.htm">detail::itemFloatValue</a>&amp; itm = m_FloatValues[index];
<a name="l00357"></a>00357          <span class="keyword">const</span> <span class="keywordtype">float</span> res = itm.<a class="code" href="structgbmath_1_1detail_1_1item_float_value.htm#a3a9bf20f6f1b7b9183399e20cee8af5b">func</a>(itm.<a class="code" href="structgbmath_1_1detail_1_1item_float_value.htm#a60b2590ab99b62b19a3fa3888a2552e5">user_ptr</a>);
<a name="l00358"></a>00358          <span class="keywordflow">return</span> res;
<a name="l00359"></a>00359  }
<a name="l00360"></a>00360 
<a name="l00361"></a><a class="code" href="classgbmath_1_1value_server.htm#ac57834cdac8ceba3bb01fe2a5c74f4ce">00361</a>  <span class="keyword">const</span> <a class="code" href="structgbmath_1_1vec2.htm" title="2d-base vector. Corrected by operators epislon">vec2</a>* <a class="code" href="classgbmath_1_1value_server.htm#ac57834cdac8ceba3bb01fe2a5c74f4ce">valueServer::getVector2Value</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> index) <span class="keyword">const</span> <span class="keywordflow">throw</span>(<span class="keywordtype">int</span>)
<a name="l00362"></a>00362  {
<a name="l00363"></a>00363          <span class="keywordflow">if</span>( index &gt; (<span class="keywordtype">int</span>)m_Vector2Values.size()-1 )
<a name="l00364"></a>00364          {
<a name="l00365"></a>00365                  <span class="keywordflow">throw</span> (index);
<a name="l00366"></a>00366          }
<a name="l00367"></a>00367 
<a name="l00368"></a>00368          <span class="keyword">const</span> <a class="code" href="structgbmath_1_1detail_1_1item_vector2_value.htm">detail::itemVector2Value</a>&amp; itm = m_Vector2Values[index];
<a name="l00369"></a>00369          <span class="keyword">const</span> <a class="code" href="structgbmath_1_1vec2.htm" title="2d-base vector. Corrected by operators epislon">vec2</a>* res = itm.<a class="code" href="structgbmath_1_1detail_1_1item_vector2_value.htm#ac58760499bcaec3bb573ddb83c2b8fb4">func</a>(itm.<a class="code" href="structgbmath_1_1detail_1_1item_vector2_value.htm#a5d5a7ef99380f668444bf8518f73d9a2">user_ptr</a>);
<a name="l00370"></a>00370          <span class="keywordflow">return</span> res;
<a name="l00371"></a>00371  }
<a name="l00372"></a>00372 
<a name="l00373"></a><a class="code" href="classgbmath_1_1value_server.htm#adda8ff49ea4e8b85a3e0d91c17296ae5">00373</a>  <span class="keyword">const</span> <a class="code" href="structgbmath_1_1vec3.htm" title="3d-base vector. Corrected by operators epislon">vec3</a>* <a class="code" href="classgbmath_1_1value_server.htm#adda8ff49ea4e8b85a3e0d91c17296ae5">valueServer::getVector3Value</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> index) <span class="keyword">const</span> <span class="keywordflow">throw</span>(<span class="keywordtype">int</span>)
<a name="l00374"></a>00374  {
<a name="l00375"></a>00375          <span class="keywordflow">if</span>( index &gt; (<span class="keywordtype">int</span>)m_Vector3Values.size()-1 )
<a name="l00376"></a>00376          {
<a name="l00377"></a>00377                  <span class="keywordflow">throw</span> (index);
<a name="l00378"></a>00378          }
<a name="l00379"></a>00379 
<a name="l00380"></a>00380          <span class="keyword">const</span> <a class="code" href="structgbmath_1_1detail_1_1item_vector3_value.htm">detail::itemVector3Value</a>&amp; itm = m_Vector3Values[index];
<a name="l00381"></a>00381          <span class="keyword">const</span> <a class="code" href="structgbmath_1_1vec3.htm" title="3d-base vector. Corrected by operators epislon">vec3</a>* res = itm.<a class="code" href="structgbmath_1_1detail_1_1item_vector3_value.htm#ac27e7563a4278739b7270362b3a054b5">func</a>(itm.<a class="code" href="structgbmath_1_1detail_1_1item_vector3_value.htm#a0d4cf6daefd5fbf0faad58fbba13e3c6">user_ptr</a>);
<a name="l00382"></a>00382          <span class="keywordflow">return</span> res;
<a name="l00383"></a>00383  }
<a name="l00384"></a>00384 
<a name="l00385"></a><a class="code" href="classgbmath_1_1value_server.htm#a5705e5fe55350ce79eb39e98b9bfaaa8">00385</a>  <span class="keyword">const</span> <a class="code" href="structgbmath_1_1vec4.htm" title="4d-base vector. Corrected by operators epislon">vec4</a>* <a class="code" href="classgbmath_1_1value_server.htm#a5705e5fe55350ce79eb39e98b9bfaaa8">valueServer::getVector4Value</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> index) <span class="keyword">const</span> <span class="keywordflow">throw</span>(<span class="keywordtype">int</span>)
<a name="l00386"></a>00386  {
<a name="l00387"></a>00387          <span class="keywordflow">if</span>( index &gt; (<span class="keywordtype">int</span>)m_Vector4Values.size()-1 )
<a name="l00388"></a>00388          {
<a name="l00389"></a>00389                  <span class="keywordflow">throw</span> (index);
<a name="l00390"></a>00390          }
<a name="l00391"></a>00391 
<a name="l00392"></a>00392          <span class="keyword">const</span> <a class="code" href="structgbmath_1_1detail_1_1item_vector4_value.htm">detail::itemVector4Value</a>&amp; itm = m_Vector4Values[index];
<a name="l00393"></a>00393          <span class="keyword">const</span> <a class="code" href="structgbmath_1_1vec4.htm" title="4d-base vector. Corrected by operators epislon">vec4</a>* res = itm.<a class="code" href="structgbmath_1_1detail_1_1item_vector4_value.htm#a39b2fa43211b505e3c7f765f4cced430">func</a>(itm.<a class="code" href="structgbmath_1_1detail_1_1item_vector4_value.htm#a67ffd9cc77cc28d168102f694ecb23ba">user_ptr</a>);
<a name="l00394"></a>00394          <span class="keywordflow">return</span> res;
<a name="l00395"></a>00395  }
<a name="l00396"></a>00396 
<a name="l00397"></a><a class="code" href="classgbmath_1_1value_server.htm#ad10104ebbafb29b4fa63c38237c1c124">00397</a>  <span class="keyword">const</span> <a class="code" href="structgbmath_1_1mat33.htm" title="matrix 3x3">mat33</a>* <a class="code" href="classgbmath_1_1value_server.htm#ad10104ebbafb29b4fa63c38237c1c124">valueServer::getMatrix33Value</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> index) <span class="keyword">const</span> <span class="keywordflow">throw</span>(<span class="keywordtype">int</span>)
<a name="l00398"></a>00398  {
<a name="l00399"></a>00399          <span class="keywordflow">if</span>( index &gt; (<span class="keywordtype">int</span>)m_Matrix33Values.size()-1 )
<a name="l00400"></a>00400          {
<a name="l00401"></a>00401                  <span class="keywordflow">throw</span> (index);
<a name="l00402"></a>00402          }
<a name="l00403"></a>00403 
<a name="l00404"></a>00404          <span class="keyword">const</span> <a class="code" href="structgbmath_1_1detail_1_1item_matrix33_value.htm">detail::itemMatrix33Value</a>&amp; itm = m_Matrix33Values[index];
<a name="l00405"></a>00405          <span class="keyword">const</span> <a class="code" href="structgbmath_1_1mat33.htm" title="matrix 3x3">mat33</a>* res = itm.<a class="code" href="structgbmath_1_1detail_1_1item_matrix33_value.htm#a40cca1e387e4057ce993baff99dcbbf5">func</a>(itm.<a class="code" href="structgbmath_1_1detail_1_1item_matrix33_value.htm#a611ce861989593c22971216f06e3615a">user_ptr</a>);
<a name="l00406"></a>00406          <span class="keywordflow">return</span> res;
<a name="l00407"></a>00407  }
<a name="l00408"></a>00408 
<a name="l00409"></a><a class="code" href="classgbmath_1_1value_server.htm#ab7a037c512a6c7f6e1d7fe6a43bf567d">00409</a>  <span class="keyword">const</span> <a class="code" href="structgbmath_1_1mat44.htm" title="matrix 4x4.">mat44</a>* <a class="code" href="classgbmath_1_1value_server.htm#ab7a037c512a6c7f6e1d7fe6a43bf567d">valueServer::getMatrix44Value</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> index) <span class="keyword">const</span> <span class="keywordflow">throw</span>(<span class="keywordtype">int</span>)
<a name="l00410"></a>00410  {
<a name="l00411"></a>00411          <span class="keywordflow">if</span>( index &gt; (<span class="keywordtype">int</span>)m_Matrix44Values.size()-1 )
<a name="l00412"></a>00412          {
<a name="l00413"></a>00413                  <span class="keywordflow">throw</span> (index);
<a name="l00414"></a>00414          }
<a name="l00415"></a>00415 
<a name="l00416"></a>00416          <span class="keyword">const</span> <a class="code" href="structgbmath_1_1detail_1_1item_matrix44_value.htm">detail::itemMatrix44Value</a>&amp; itm = m_Matrix44Values[index];
<a name="l00417"></a>00417          <span class="keyword">const</span> <a class="code" href="structgbmath_1_1mat44.htm" title="matrix 4x4.">mat44</a>* res = itm.<a class="code" href="structgbmath_1_1detail_1_1item_matrix44_value.htm#adbf37832e2e7fc5fc08713315e795598">func</a>(itm.<a class="code" href="structgbmath_1_1detail_1_1item_matrix44_value.htm#afc262741c7913db0c75a8045649e69a9">user_ptr</a>);
<a name="l00418"></a>00418          <span class="keywordflow">return</span> res;
<a name="l00419"></a>00419  }
<a name="l00420"></a>00420 
<a name="l00421"></a>00421 
<a name="l00422"></a>00422 }
<a name="l00423"></a>00423 
<a name="l00424"></a>00424 <span class="preprocessor">#pragma warning(pop)</span>
</pre></div></div>
<!--- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&nbsp;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&nbsp;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&nbsp;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&nbsp;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&nbsp;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&nbsp;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&nbsp;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&nbsp;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&nbsp;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&nbsp;</span>Friends</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<hr class="footer"/><address style="text-align: right;"><small>Generated on Tue May 22 10:25:54 2012 for gbmath by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.3 </small></address>
</body>
</html>
